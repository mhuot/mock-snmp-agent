name: API Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'rest_api/**'
      - 'tests/**'
      - 'requirements*.txt'
  pull_request:
    branches: [ main ]
    paths:
      - 'rest_api/**'
      - 'tests/**'
      - 'requirements*.txt'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y snmp snmp-mibs-downloader

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 rest_api --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 rest_api --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type checking with mypy
      continue-on-error: true
      run: |
        mypy rest_api --ignore-missing-imports

    - name: Run API tests
      run: |
        python run_api_tests.py all --coverage --verbose
      env:
        PYTHONPATH: .

    - name: Generate test report
      run: |
        python run_api_tests.py --report
      env:
        PYTHONPATH: .

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-reports/
          .coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: test-reports/coverage.xml
        flags: api-tests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y snmp snmp-mibs-downloader
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run integration tests
      run: |
        python run_api_tests.py --integration
      env:
        PYTHONPATH: .

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security scan with bandit
      run: |
        bandit -r rest_api -f json -o bandit-report.json
      continue-on-error: true

    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install locust

    - name: Run performance tests
      run: |
        # Create a simple load test
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between

        class APIUser(HttpUser):
            wait_time = between(1, 3)

            @task(3)
            def test_health(self):
                self.client.get("/health")

            @task(2)
            def test_metrics(self):
                self.client.get("/metrics")

            @task(1)
            def test_config(self):
                self.client.get("/config")
        EOF

        # Start API server in background
        python -c "
        import asyncio
        import uvicorn
        from rest_api.server import SNMPAgentAPIServer

        async def run_server():
            server = SNMPAgentAPIServer()
            config = uvicorn.Config(server.app, host='127.0.0.1', port=8080, log_level='error')
            server_instance = uvicorn.Server(config)
            await server_instance.serve()

        asyncio.run(run_server())
        " &

        # Wait for server to start
        sleep 5

        # Run load test
        locust --host=http://127.0.0.1:8080 --users 10 --spawn-rate 2 --run-time 30s --headless --html performance-report.html
      env:
        PYTHONPATH: .

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.html
